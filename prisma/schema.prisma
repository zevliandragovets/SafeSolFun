generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id              String    @id @default(cuid())
  name            String
  symbol          String    @unique
  description     String?
  imageUrl        String?
  bannerUrl       String?
  creatorAddress  String
  tokenAddress    String    @unique
  bondingCurveAddress String @unique
  
  // Token economics
  totalSupply     BigInt    @default(1000000000)
  currentSupply   BigInt    @default(0)
  marketCap       Float     @default(0)
  price           Float     @default(0)
  
  // Trading fees - REMOVED TEMPORARILY TO FIX ERROR
  // buyFee          Float     @default(1.0)    // 1%
  // sellFee         Float     @default(1.0)    // 1%
  // platformFee     Float     @default(0.5)    // 0.5%
  
  // Social links
  website         String?
  twitter         String?
  telegram        String?
  
  // Status
  isGraduated     Boolean   @default(false)
  graduatedAt     DateTime?
  rugScore        Float     @default(0)
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  transactions    Transaction[]
  watchlists      Watchlist[]
  priceHistory    PriceHistory[]
  holders         Holder[]
  
  @@map("tokens")
}

model Transaction {
  id            String    @id @default(cuid())
  tokenId       String
  userAddress   String
  type          TransactionType
  amount        Float
  solAmount     Float
  price         Float
  signature     String    @unique
  createdAt     DateTime  @default(now())
  
  token         Token     @relation(fields: [tokenId], references: [id])
  
  @@map("transactions")
}

model PriceHistory {
  id          String    @id @default(cuid())
  tokenId     String
  price       String    // Using String to match your code's toString() usage
  volume      String?   // Using String to match your code's toString() usage
  createdAt   DateTime  @default(now())
  
  token       Token     @relation(fields: [tokenId], references: [id])
  
  @@index([tokenId, createdAt])
  @@map("price_history")
}

model Watchlist {
  id          String    @id @default(cuid())
  userAddress String
  tokenId     String
  createdAt   DateTime  @default(now())
  
  token       Token     @relation(fields: [tokenId], references: [id])
  
  @@unique([userAddress, tokenId])
  @@map("watchlists")
}

model Holder {
  id           String    @id @default(cuid())
  tokenId      String
  address      String
  balance      String    // Using String to handle large numbers
  percentage   String?   // Using String for precision
  lastActivity DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  token        Token     @relation(fields: [tokenId], references: [id])
  
  @@unique([tokenId, address])
  @@index([tokenId, balance])
  @@map("holders")
}

model CreatorFee {
  id            String    @id @default(cuid())
  creatorAddress String
  tokenAddress  String
  totalFees     Float     @default(0)
  claimedFees   Float     @default(0)
  lastClaimedAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([creatorAddress, tokenAddress])
  @@map("creator_fees")
}

enum TransactionType {
  BUY
  SELL
}